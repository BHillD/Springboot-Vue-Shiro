<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.EmployeeMapper">
    <resultMap id="Employee" type="com.example.model.Employee">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="gender" property="gender"/>
        <result column="birthday" property="birthday"/>
        <result column="idCard" property="idCard"/>
        <result column="wedlock" property="wedlock"/>
        <result column="nativePlace" property="nativePlace"/>
        <result column="email" property="email"/>
        <result column="phone" property="phone"/>
        <result column="address" property="address"/>
        <result column="nation" property="nation"/>
        <result column="politic" property="politic"/>
    </resultMap>

    <resultMap id="EmpSalary" type="com.example.model.EmpSalary">
        <result column="eid"   property="id"/>
        <result column="ename" property="name"/>
        <result column="ephone" property="phone"/>
        <result column="email" property="email"/>
        <association property="salary" javaType="com.example.model.Salary">
            <result column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="basicSalary" property="basicSalary"/>
            <result column="bonus" property="bonus"/>
            <result column="lunchSalary" property="lunchSalary"/>
            <result column="trafficSalary" property="trafficSalary"/>
            <result column="allSalary" property="allSalary"/>
            <result column="pensionBase" property="pensionBase"/>
            <result column="pensionPer" property="pensionPer"/>
            <result column="medicalBase" property="medicalBase"/>
            <result column="medicalPer" property="medicalPer"/>
            <result column="accumulationFundBase" property="accumulationFundBase"/>
            <result column="accumulationFundPer" property="accumulationFundPer"/>
        </association>
    </resultMap>
    <update id="editEmployee" parameterType="com.example.model.Employee">
        update employee
        <set>
            <if test="employee.name != null and employee.name != ''">
                name = #{employee.name},
            </if>
            <if test="employee.gender != null and employee.gender != ''">
                gender = #{employee.gender},
            </if>
            <if test="employee.birthday != null and employee.birthday != ''">
                birthday = #{employee.birthday},
            </if>
            <if test="employee.wedlock != null and employee.wedlock != ''">
                wedlock = #{employee.wedlock},
            </if>
            <if test="employee.nation != null and employee.nation != ''">
                nation = #{employee.nation},
            </if>
            <if test="employee.nativePlace != null and employee.nativePlace != ''">
                nativePlace = #{employee.nativePlace},
            </if>
            <if test="employee.politic != null and employee.politic != ''">
                politic = #{employee.politic},
            </if>
            <if test="employee.email != null and employee.email != ''">
                email = #{employee.email},
            </if>
            <if test="employee.phone != null and employee.phone != ''">
                phone = #{employee.phone},
            </if>
            <if test="employee.address != null and employee.address != ''">
                address = #{employee.address},
            </if>
            <if test="employee.idCard != null and employee.idCard != ''">
                idCard = #{employee.idCard},
            </if>
        </set>
         where idCard = #{employee.idCard}
    </update>


    <select id="getEmployeeByPage" resultMap="Employee">
        select employee.* from employee where  employee.name like concat('%',#{keywords},'%')
        <if test="start!= null and size!= null">
            order by employee.id limit #{start},#{size}
        </if>
    </select>

    <select id="getCountByKeywords" resultType="Integer">
        SELECT count(*) FROM employee e WHERE e.name LIKE concat('%',#{keywords},'%')
    </select>

    <insert id="addEmployee" parameterType="com.example.model.Employee">
        insert into employee values (null,#{employee.name},#{employee.gender},#{employee.birthday},#{employee.idCard},#{employee.wedlock},#{employee.nation},#{employee.nativePlace},#{employee.politic},#{employee.email},#{employee.phone},#{employee.address})
    </insert>

    <delete id="deleteEmployee" parameterType="com.example.model.Employee">
        delete from employee where idCard in
        <foreach collection="idCards" separator="," open="(" close=")" item="idCard">
            #{idCard}
        </foreach>
    </delete>

    <select id="getEmpSalariesByPage" resultMap="EmpSalary">
        SELECT employee.name AS ename,employee.id AS eid,employee.email AS email,employee.phone AS ephone,salary.*
        FROM(employee_salary LEFT JOIN employee ON employee.id = employee_salary.eid) LEFT JOIN salary ON(salary.id = employee_salary.`sid`)
        <if test="start!= null and size!= null">
            order by eid limit #{start},#{size}
        </if>
    </select>
</mapper>